function [] = plotSaccadesAndAHVsinglePlot5(cfg, savedestination, fd, varargin)

% 4/2021. JJS.
% Make a single plot that has saccade peths (both directions) and AHV tuning curve for a single neuron. Save all plots as images into a folder.
% This version includes a simple line for the PETHs (no errorbars) and the raw FR data for the tuning curve (more like a scatterplot).

% Inputs:
%   temporaldata: nCell x nBins double with firing rate data for temporal saccades  (from makeSaccadeHeatPlot.m)
%   nasaldata: nCell x nBins double with firing rate data for nasal saccades
%   *TC_data: not an explicit input, but this is retrieved from each session folder. Looks for file 'SSN-FRxAHV.mat'. Created by saveAHV_FR_scatterplot.m
%   binCenters: the centers of the bins used to calculate the saccade PETHs
%   cellname:  the name of each neuron for the saccade PETHs, in the order in which they were calculated (i.e. first folder in the directory)
%   cellID: the order of the saccade peth cells, relative to the order for all cells
%   nametouse: the name to use for saving each image file
%   savedestination: where the image files will be save to
%

% 10/2021. JJS. This version (ver5) can take a list of sessions (fd) and specific cells to plot (fc) so as to only plot cells within a certain category (say, 'symmetric').
% fd & fc are generated by 'processAHVregression_values2.m'

occthresh = 0.5; % threshold number of seconds occupancy for including in tuning curve
LineWidth = 5;
doSave = 1;
doPause = 0;
figType = 'jpg';
process_varargin(varargin);
% formatSpec = '%.2f';

cfg_def.doPlotThresholds = 0;
cfg = ProcessConfig(cfg_def,cfg);

if isempty(fd)
    fd = FindFiles('*keys.m');
end
if isempty(savedestination)
    savedestination = pwd;
end
TTs = FindFiles('*.t');
for iSess = 1:length(fd)
    pushdir(fileparts(fd{iSess}));
    SSN = HD_GetSSN;
    disp(SSN)
    
    if exist(strcat(SSN, '-VT1_proc.mat'))
        [FRxBinT, FRxBinN, FRxBinTsmooth, FRxBinNsmooth, FRxBinTnorm, FRxBinNnorm, TnormSmooth, NnormSmooth, outputIT, binCenters, cfg, cellID, cellname] = makeSaccadeHeatPlot(cfg);
        temporaldata = FRxBinTsmooth;
        nasaldata = FRxBinNsmooth;
        
        %         fc = FindFile('*FRxAHV.mat');    % this is pre-computed AHV tuning curve-type info. Should have variables AHV_tsd and AHV_F
        %         load(fc);
        [S] = LoadSpikesJeff;
        
        % get AHV Tuning Curve
        cfg_AHV = [];
        cfg_AHV.subsample_factor = 10;
        [AHV_tsd, tc_out] = AHV_tuning(cfg_AHV, S);
        AHV_dt = median(diff(AHV_tsd.tvec));
        
        cfg_Q = [];
        cfg_Q.smooth = 'gauss';
        cfg_Q.gausswin_sd = 0.05;
        cfg_Q.dt = AHV_dt;
        cfg_Q.tvec_edges = AHV_tsd.tvec(1):AHV_dt:AHV_tsd.tvec(end);
        F = MakeQfromS(cfg_Q, S); % convert to FR
        % convert to FR
        F.data = F.data ./ cfg_Q.dt;
        % find FR corresponding to each AHV sample
        F_idx = nearest_idx3(AHV_tsd.tvec, F.tvec);
        AHV_F = F.data(:,F_idx);
        
        spikefiles = FindFiles('*.t');
        %         s = strfind(spikefiles, fd{iSess});
        %         iPlot = find(cell2mat(s));
        clf
        numPlots = length(spikefiles); 
        t = tiledlayout(1,numPlots);
        for iPlot = 1:numPlots
            ax1 = nexttile
            %             subtightplot(1,iPlot,1)
            %% Plot the AHV data
            ax1 = axes(t);
            plot(ax1, AHV_tsd.data, AHV_F(iPlot,:), '.', 'MarkerSize', .5, 'color', [.8 .8 .8]);
            hold on
            plot(ax1, tc_out.usr.binCenters(tc_out.occ_hist>occthresh), smoothdata(tc_out.tc(iPlot,(tc_out.occ_hist>occthresh))), 'k', 'LineWidth', 3);
            c = axis;
            axis([-200 200 c(3) c(4)])
            ax1.XAxisLocation = 'top';
            ax1.YAxisLocation = 'right';
            ylabel('AHV Firing Rate (Hz)')
            title(S.label{iPlot})
            ax1.XColor = 'k';
            ax1.YColor = 'k';
            %             h = get(gca, 'XLim');
            %             h2 = get(gca, 'YLim');
            %             text(.75*h(1), 5, 'CW', 'FontSize', 12)
            %             text(.5*h(2), 5, 'CCW', 'FontSize', 12)
            
            %% Plot the saccade data
            ax2 = axes(t);
            plot(ax2, binCenters, nasaldata(iPlot,:), 'Color', [1 .6 .2], 'LineWidth', LineWidth);
            hold on
            plot(ax2, binCenters, temporaldata(iPlot,:), 'Color', 'r', 'LineWidth', LineWidth);
            legend('Nasal (CW)', 'Temporal (CCW)', 'Location', 'NorthWest')
            xlabel('Time peri Saccade (sec)')
            ylabel('Saccade Firing Rate (Hz)')
            
            h = get(gca, 'XLim');
            h2 = get(gca, 'YLim');
            text(.75*h(1), 1.2*h2(1), 'CW', 'FontSize', 12)
            text(.5*h(2), 1.2*h2(1), 'CCW', 'FontSize', 12)
            
            ax2.Color = 'none';
            ax1.Box = 'off';
            ax2.Box = 'off';
            ax2.XColor = 'r';
            ax2.YColor = 'r';
            %             text(.1,.85,num2str(zVal_T(iPlot),formatSpec), 'Units', 'Normalized', 'Color', 'r', 'FontSize', FontSize);
            %             text(.1,.65,num2str(zVal_N(iPlot),formatSpec), 'Units', 'Normalized', 'Color', [1 .6 .2], 'FontSize', FontSize);
%             nexttile 
        end
        if doPause == 1
            disp('paused. waiting for user')
            pause
        end
        if doSave == 1
            baseFileName = S.label{iPlot};
            if strcmp(figType, 'matlab') == 1
                fname = fullfile(savedestination, strcat(baseFileName, '.fig'));
                cd(savedestination)
                disp('saving')
                saveas(gcf, fname)
            elseif strcmp(figType, 'eps') ==1
                cd(savedestination)
                print(gcf, '-depsc', strcat(baseFileName, '.eps'));
                disp('printing')
            elseif strcmp(figType, 'jpg') == 1
                fname = fullfile(savedestination, strcat(baseFileName, '.jpg'));
                cd(savedestination)
                disp('saving')
                saveas(gcf, fname)
            end
        end
    end
end


